import React, { useState, useEffect } from 'react';
import apiService from '../common/services/apiService';

function OtpForm({onValueChange, formData, isExpired}) {
  const [otpValue, setOtpValue] = useState({
    verification: '',
  });
  const [isOtpVerified, setIsOtpVerified] = useState(false);
  const [timer, setTimer] = useState(45);
  const [isButtonDisabled, setIsButtonDisabled] = useState(true);
  if(isExpired){
    setIsButtonDisabled(false);
  }
  const [errorMessages, setErrorMessages] = useState('');
  const { phoneNumber, emailId } = formData;
  useEffect(() => {
    let interval;
    //start timer
    if(timer > 0){
      interval = setInterval(() => {
        setTimer((prevTimer) => prevTimer - 1);
      }, 1000);
    }else{
      setIsButtonDisabled(false);
    }
    return () => clearInterval(interval);
  },[timer])

  const resendOtp = (e) => {
    e.preventDefault();
    let allFieldPresent = Object.values(formData).every((value) => value !== '');
    if (allFieldPresent) {
      const phoneNumberValue = phoneNumber.replace(/\D/g, "");
      apiService.get(`/rest/leadSource//send_otp?recipientPhoneNumber=${phoneNumberValue}&emailId=${emailId}`).then((response) => {
        console.log(response);
        if (!response.data.error) {
          if (response.data.resultObject.otpStatus.toLowerCase() == 'delivered' || response.resultObject.resultObject.toLowerCase() == "success") {
            setIsButtonDisabled(true);
            setTimer(45);
          }
        }
      })
    }
  }


  const handleChange = (e) => {
    setOtpValue({ ...otpValue, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if(!otpValue.verification){
      setErrorMessages(
        "Please enter verification code"
      );
      return;
    }
    const phoneNumberValue = phoneNumber.replace(/\D/g, "");
    // Here you would typically make an API call to save the data
    console.log('Form data submitted:', otpValue);
    //api for OTP validation
    //rest/leadSource/verifyOtp?phoneNumber=${phoneNumber}&otp=${otpVal}`
    apiService.post(`/rest/leadSource/verifyOtp?phoneNumber=${phoneNumberValue}&otp=${otpValue.verification}`).then((response) => {
      setTimer(0);
      if(!response.data.error){
        onValueChange(true, otpValue.verification);
        setIsOtpVerified(true);
      }else{
        let invalidToken = "Invalid otp, please enter valid 6 digits otp";
        if (
          response.data.error.message
            .toLowerCase()
            .includes(invalidToken.toLowerCase())
        ) {
          setErrorMessages(
            "Invalid verification code, please enter valid 6 digits verification code"
          );
        } else if (
          response.data.error.code == "400" ||
          response.data.error.message == "Invalid email"
        ) {
           setErrorMessages(
            "Invalid email. Please enter valid email."
          );
          setTimeout(() => {
            redirectTo404()
          }, 1000);
        } else {
          setErrorMessages(response.data.error.message);
        }
      }
    })
    
  };

  const redirectTo404 = () => {
    setTimeout(() => {
      window.location.href = `${window.location.origin}/404`;
    }, 1000);
  };

  return (
    <div className="flex  gap30 ">
      <div className="form-group flex alignE">
          <input
            className="nf-control"
            type="text"
            id="verification"
            name="verification"
            placeholder="Enter verification code"
            value={formData.verification}
              onChange={handleChange}
            required
          />
        {isOtpVerified &&<div className="flex"><img decoding="async" src="https://staging.newfi.com/wp-content/uploads/2023/10/download.png" /><span className="fs12s">Verified</span></div>}
        <div className="nf-error-text">{errorMessages}</div>
      </div>
    {!isOtpVerified && <div className='flex alignC justifyC gap30'> 
      <div className="form-group"><button className="nf-btn nf-btn-priamry mT30 sm"  disabled={!isButtonDisabled} onClick={handleSubmit} >Verify Code</button>
      </div>
      <div className="form-group">
      <button className="nf-btn nf-btn-priamry mT30 sm" onClick={resendOtp} disabled={isButtonDisabled}>Resend verfication code</button>
        {isButtonDisabled && <div className="nf-error-text">{timer} seconds</div>}
      </div>
    </div>
    }

    
  </div>
  );
}

export default OtpForm;